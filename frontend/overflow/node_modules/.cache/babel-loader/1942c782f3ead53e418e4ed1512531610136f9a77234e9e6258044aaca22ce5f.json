{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useRef, useEffect, useState } from 'react';\nimport { shallowEqual, useSelector, connect, useDispatch } from 'react-redux';\nimport * as auth from './AuthRedux';\nimport { getUserByToken } from './AuthCRUD';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapState = state => ({\n  auth: state.auth\n});\nconst connector = connect(mapState, auth.actions);\nconst AuthInit = props => {\n  _s();\n  const didRequest = useRef(false);\n  const dispatch = useDispatch();\n  const [showSplashScreen, setShowSplashScreen] = useState(true);\n  const accessToken = useSelector(({\n    auth\n  }) => auth.accessToken, shallowEqual);\n\n  // We should request user by authToken before rendering the application\n  useEffect(() => {\n    const requestUser = async () => {\n      try {\n        if (!didRequest.current) {\n          const {\n            data: user\n          } = await getUserByToken(accessToken);\n          dispatch(props.fulfillUser(user));\n        }\n      } catch (error) {\n        console.error(error);\n        if (!didRequest.current) {\n          dispatch(props.logout());\n        }\n      } finally {\n        setShowSplashScreen(false);\n      }\n      return () => didRequest.current = true;\n    };\n    if (accessToken) {\n      requestUser();\n    } else {\n      dispatch(props.logout());\n      setShowSplashScreen(false);\n    }\n    // eslint-disable-next-line\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: props.children\n  }, void 0, false);\n};\n_s(AuthInit, \"QZZ6ZvjLpFInhk9rFw5xQoMZLJU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = AuthInit;\nexport default _c2 = connector(AuthInit);\nvar _c, _c2;\n$RefreshReg$(_c, \"AuthInit\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["useRef","useEffect","useState","shallowEqual","useSelector","connect","useDispatch","auth","getUserByToken","Fragment","_Fragment","jsxDEV","_jsxDEV","mapState","state","connector","actions","AuthInit","props","_s","didRequest","dispatch","showSplashScreen","setShowSplashScreen","accessToken","requestUser","current","data","user","fulfillUser","error","console","logout","children","_c","_c2","$RefreshReg$"],"sources":["/Users/erickmaina/Desktop/Personal_Projects/Java/Overflow/frontend/overflow/src/features/auth/redux/AuthInit.tsx"],"sourcesContent":["import { FC, useRef, useEffect, useState } from 'react'\r\nimport { shallowEqual, useSelector, connect, useDispatch, ConnectedProps } from 'react-redux'\r\nimport * as auth from './AuthRedux'\r\nimport { getUserByToken } from './AuthCRUD'\r\nimport { RootState } from '../../../setup/redux/RootReducer'\r\n\r\nconst mapState = (state: RootState) => ({ auth: state.auth })\r\nconst connector = connect(mapState, auth.actions)\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\nconst AuthInit: FC<PropsFromRedux> = (props) => {\r\n  const didRequest = useRef(false)\r\n  const dispatch = useDispatch()\r\n  const [showSplashScreen, setShowSplashScreen] = useState(true)\r\n  const accessToken = useSelector<RootState>(({ auth }) => auth.accessToken, shallowEqual)\r\n\r\n  // We should request user by authToken before rendering the application\r\n  useEffect(() => {\r\n    const requestUser = async () => {\r\n      try {\r\n        if (!didRequest.current) {\r\n          const { data: user } = await getUserByToken(accessToken as string)\r\n          dispatch(props.fulfillUser(user))\r\n        }\r\n      } catch (error) {\r\n        console.error(error)\r\n        if (!didRequest.current) {\r\n          dispatch(props.logout())\r\n        }\r\n      } finally {\r\n        setShowSplashScreen(false)\r\n      }\r\n\r\n      return () => (didRequest.current = true)\r\n    }\r\n\r\n    if (accessToken) {\r\n      requestUser()\r\n    } else {\r\n      dispatch(props.logout())\r\n      setShowSplashScreen(false)\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  return <>{props.children}</>\r\n}\r\n\r\nexport default connector(AuthInit)\r\n"],"mappings":";AAAA,SAAaA,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACvD,SAASC,YAAY,EAAEC,WAAW,EAAEC,OAAO,EAAEC,WAAW,QAAwB,aAAa;AAC7F,OAAO,KAAKC,IAAI,MAAM,aAAa;AACnC,SAASC,cAAc,QAAQ,YAAY;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAG3C,MAAMC,QAAQ,GAAIC,KAAgB,KAAM;EAAEP,IAAI,EAAEO,KAAK,CAACP;AAAK,CAAC,CAAC;AAC7D,MAAMQ,SAAS,GAAGV,OAAO,CAACQ,QAAQ,EAAEN,IAAI,CAACS,OAAO,CAAC;AAGjD,MAAMC,QAA4B,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC9C,MAAMC,UAAU,GAAGpB,MAAM,CAAC,KAAK,CAAC;EAChC,MAAMqB,QAAQ,GAAGf,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACgB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAMsB,WAAW,GAAGpB,WAAW,CAAY,CAAC;IAAEG;EAAK,CAAC,KAAKA,IAAI,CAACiB,WAAW,EAAErB,YAAY,CAAC;;EAExF;EACAF,SAAS,CAAC,MAAM;IACd,MAAMwB,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACF,IAAI,CAACL,UAAU,CAACM,OAAO,EAAE;UACvB,MAAM;YAAEC,IAAI,EAAEC;UAAK,CAAC,GAAG,MAAMpB,cAAc,CAACgB,WAAqB,CAAC;UAClEH,QAAQ,CAACH,KAAK,CAACW,WAAW,CAACD,IAAI,CAAC,CAAC;QACnC;MACF,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACpB,IAAI,CAACV,UAAU,CAACM,OAAO,EAAE;UACvBL,QAAQ,CAACH,KAAK,CAACc,MAAM,CAAC,CAAC,CAAC;QAC1B;MACF,CAAC,SAAS;QACRT,mBAAmB,CAAC,KAAK,CAAC;MAC5B;MAEA,OAAO,MAAOH,UAAU,CAACM,OAAO,GAAG,IAAK;IAC1C,CAAC;IAED,IAAIF,WAAW,EAAE;MACfC,WAAW,CAAC,CAAC;IACf,CAAC,MAAM;MACLJ,QAAQ,CAACH,KAAK,CAACc,MAAM,CAAC,CAAC,CAAC;MACxBT,mBAAmB,CAAC,KAAK,CAAC;IAC5B;IACA;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOX,OAAA,CAAAF,SAAA;IAAAuB,QAAA,EAAGf,KAAK,CAACe;EAAQ,gBAAG,CAAC;AAC9B,CAAC;AAAAd,EAAA,CApCKF,QAA4B;EAAA,QAEfX,WAAW,EAERF,WAAW;AAAA;AAAA8B,EAAA,GAJ3BjB,QAA4B;AAsClC,eAAAkB,GAAA,GAAepB,SAAS,CAACE,QAAQ,CAAC;AAAA,IAAAiB,EAAA,EAAAC,GAAA;AAAAC,YAAA,CAAAF,EAAA;AAAAE,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}