{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n  return to;\n};\nimport * as React from 'react';\nimport convert from 'react-from-dom';\nimport { STATUS, canUseDOM, isSupportedEnvironment, randomString, removeProperties } from './helpers';\nexport var cacheStore = Object.create(null);\nvar InlineSVG = /** @class */function (_super) {\n  __extends(InlineSVG, _super);\n  function InlineSVG(props) {\n    var _this = _super.call(this, props) || this;\n    _this.isActive = false;\n    _this.handleCacheQueue = function (content) {\n      /* istanbul ignore else */\n      if (typeof content === 'string') {\n        _this.handleLoad(content);\n        return;\n      }\n      _this.handleError(content);\n    };\n    _this.handleLoad = function (content) {\n      /* istanbul ignore else */\n      if (_this.isActive) {\n        _this.setState({\n          content: content,\n          status: STATUS.LOADED\n        }, _this.getElement);\n      }\n    };\n    _this.handleError = function (error) {\n      var onError = _this.props.onError;\n      var status = error.message === 'Browser does not support SVG' ? STATUS.UNSUPPORTED : STATUS.FAILED;\n      /* istanbul ignore else */\n      if (_this.isActive) {\n        _this.setState({\n          status: status\n        }, function () {\n          /* istanbul ignore else */\n          if (typeof onError === 'function') {\n            onError(error);\n          }\n        });\n      }\n    };\n    _this.request = function () {\n      var _a = _this.props,\n        cacheRequests = _a.cacheRequests,\n        fetchOptions = _a.fetchOptions,\n        src = _a.src;\n      try {\n        if (cacheRequests) {\n          cacheStore[src] = {\n            content: '',\n            status: STATUS.LOADING,\n            queue: []\n          };\n        }\n        return fetch(src, fetchOptions).then(function (response) {\n          var contentType = response.headers.get('content-type');\n          var _a = __read((contentType || '').split(/ ?; ?/), 1),\n            fileType = _a[0];\n          if (response.status > 299) {\n            throw new Error('Not found');\n          }\n          if (!['image/svg+xml', 'text/plain'].some(function (d) {\n            return fileType.indexOf(d) >= 0;\n          })) {\n            throw new Error(\"Content type isn't valid: \" + fileType);\n          }\n          return response.text();\n        }).then(function (content) {\n          var currentSrc = _this.props.src;\n          // the current src don't match the previous one, skipping...\n          if (src !== currentSrc) {\n            return;\n          }\n          _this.handleLoad(content);\n          /* istanbul ignore else */\n          if (cacheRequests) {\n            var cache = cacheStore[src];\n            /* istanbul ignore else */\n            if (cache) {\n              cache.content = content;\n              cache.status = STATUS.LOADED;\n              cache.queue = cache.queue.filter(function (cb) {\n                cb(content);\n                return false;\n              });\n            }\n          }\n        }).catch(function (error) {\n          _this.handleError(error);\n          /* istanbul ignore else */\n          if (cacheRequests) {\n            var cache = cacheStore[src];\n            /* istanbul ignore else */\n            if (cache) {\n              cache.queue.forEach(function (cb) {\n                cb(error);\n              });\n              delete cacheStore[src];\n            }\n          }\n        });\n      } catch (error) {\n        return _this.handleError(new Error(error.message));\n      }\n    };\n    _this.state = {\n      content: '',\n      element: null,\n      hasCache: !!props.cacheRequests && !!cacheStore[props.src],\n      status: STATUS.PENDING\n    };\n    _this.hash = props.uniqueHash || randomString(8);\n    return _this;\n  }\n  InlineSVG.prototype.componentDidMount = function () {\n    this.isActive = true;\n    if (!canUseDOM()) {\n      return;\n    }\n    var status = this.state.status;\n    var src = this.props.src;\n    try {\n      /* istanbul ignore else */\n      if (status === STATUS.PENDING) {\n        /* istanbul ignore else */\n        if (!isSupportedEnvironment()) {\n          throw new Error('Browser does not support SVG');\n        }\n        /* istanbul ignore else */\n        if (!src) {\n          throw new Error('Missing src');\n        }\n        this.load();\n      }\n    } catch (error) {\n      this.handleError(error);\n    }\n  };\n  InlineSVG.prototype.componentDidUpdate = function (prevProps, prevState) {\n    if (!canUseDOM()) {\n      return;\n    }\n    var _a = this.state,\n      hasCache = _a.hasCache,\n      status = _a.status;\n    var _b = this.props,\n      onLoad = _b.onLoad,\n      src = _b.src;\n    if (prevState.status !== STATUS.READY && status === STATUS.READY) {\n      /* istanbul ignore else */\n      if (onLoad) {\n        onLoad(src, hasCache);\n      }\n    }\n    if (prevProps.src !== src) {\n      if (!src) {\n        this.handleError(new Error('Missing src'));\n        return;\n      }\n      this.load();\n    }\n  };\n  InlineSVG.prototype.componentWillUnmount = function () {\n    this.isActive = false;\n  };\n  InlineSVG.prototype.processSVG = function () {\n    var content = this.state.content;\n    var preProcessor = this.props.preProcessor;\n    if (preProcessor) {\n      return preProcessor(content);\n    }\n    return content;\n  };\n  InlineSVG.prototype.updateSVGAttributes = function (node) {\n    var _this = this;\n    var _a = this.props,\n      _b = _a.baseURL,\n      baseURL = _b === void 0 ? '' : _b,\n      uniquifyIDs = _a.uniquifyIDs;\n    var replaceableAttributes = ['id', 'href', 'xlink:href', 'xlink:role', 'xlink:arcrole'];\n    var linkAttributes = ['href', 'xlink:href'];\n    var isDataValue = function (name, value) {\n      return linkAttributes.indexOf(name) >= 0 && (value ? value.indexOf('#') < 0 : false);\n    };\n    if (!uniquifyIDs) {\n      return node;\n    }\n    __spreadArray([], __read(node.children)).map(function (d) {\n      if (d.attributes && d.attributes.length) {\n        var attributes_1 = Object.values(d.attributes).map(function (a) {\n          var attr = a;\n          var match = a.value.match(/url\\((.*?)\\)/);\n          if (match && match[1]) {\n            attr.value = a.value.replace(match[0], \"url(\" + baseURL + match[1] + \"__\" + _this.hash + \")\");\n          }\n          return attr;\n        });\n        replaceableAttributes.forEach(function (r) {\n          var attribute = attributes_1.find(function (a) {\n            return a.name === r;\n          });\n          if (attribute && !isDataValue(r, attribute.value)) {\n            attribute.value = attribute.value + \"__\" + _this.hash;\n          }\n        });\n      }\n      if (d.children.length) {\n        return _this.updateSVGAttributes(d);\n      }\n      return d;\n    });\n    return node;\n  };\n  InlineSVG.prototype.getNode = function () {\n    var _a = this.props,\n      description = _a.description,\n      title = _a.title;\n    try {\n      var svgText = this.processSVG();\n      var node = convert(svgText, {\n        nodeOnly: true\n      });\n      if (!node || !(node instanceof SVGSVGElement)) {\n        throw new Error('Could not convert the src to a DOM Node');\n      }\n      var svg = this.updateSVGAttributes(node);\n      if (description) {\n        var originalDesc = svg.querySelector('desc');\n        if (originalDesc && originalDesc.parentNode) {\n          originalDesc.parentNode.removeChild(originalDesc);\n        }\n        var descElement = document.createElement('desc');\n        descElement.innerHTML = description;\n        svg.prepend(descElement);\n      }\n      if (title) {\n        var originalTitle = svg.querySelector('title');\n        if (originalTitle && originalTitle.parentNode) {\n          originalTitle.parentNode.removeChild(originalTitle);\n        }\n        var titleElement = document.createElement('title');\n        titleElement.innerHTML = title;\n        svg.prepend(titleElement);\n      }\n      return svg;\n    } catch (error) {\n      return this.handleError(error);\n    }\n  };\n  InlineSVG.prototype.getElement = function () {\n    try {\n      var node = this.getNode();\n      var element = convert(node);\n      if (!element || !React.isValidElement(element)) {\n        throw new Error('Could not convert the src to a React element');\n      }\n      this.setState({\n        element: element,\n        status: STATUS.READY\n      });\n    } catch (error) {\n      this.handleError(new Error(error.message));\n    }\n  };\n  InlineSVG.prototype.load = function () {\n    var _this = this;\n    /* istanbul ignore else */\n    if (this.isActive) {\n      this.setState({\n        content: '',\n        element: null,\n        status: STATUS.LOADING\n      }, function () {\n        var _a = _this.props,\n          cacheRequests = _a.cacheRequests,\n          src = _a.src;\n        var cache = cacheRequests && cacheStore[src];\n        if (cache) {\n          /* istanbul ignore else */\n          if (cache.status === STATUS.LOADING) {\n            cache.queue.push(_this.handleCacheQueue);\n          } else if (cache.status === STATUS.LOADED) {\n            _this.handleLoad(cache.content);\n          }\n          return;\n        }\n        var dataURI = src.match(/data:image\\/svg[^,]*?(;base64)?,(.*)/);\n        var inlineSrc;\n        if (dataURI) {\n          inlineSrc = dataURI[1] ? atob(dataURI[2]) : decodeURIComponent(dataURI[2]);\n        } else if (src.indexOf('<svg') >= 0) {\n          inlineSrc = src;\n        }\n        if (inlineSrc) {\n          _this.handleLoad(inlineSrc);\n          return;\n        }\n        _this.request();\n      });\n    }\n  };\n  InlineSVG.prototype.render = function () {\n    var _a = this.state,\n      element = _a.element,\n      status = _a.status;\n    var _b = this.props,\n      _c = _b.children,\n      children = _c === void 0 ? null : _c,\n      innerRef = _b.innerRef,\n      _d = _b.loader,\n      loader = _d === void 0 ? null : _d;\n    var elementProps = removeProperties(this.props, 'baseURL', 'cacheRequests', 'children', 'description', 'fetchOptions', 'innerRef', 'loader', 'onError', 'onLoad', 'preProcessor', 'src', 'title', 'uniqueHash', 'uniquifyIDs');\n    if (!canUseDOM()) {\n      return loader;\n    }\n    if (element) {\n      return React.cloneElement(element, __assign({\n        ref: innerRef\n      }, elementProps));\n    }\n    if ([STATUS.UNSUPPORTED, STATUS.FAILED].indexOf(status) > -1) {\n      return children;\n    }\n    return loader;\n  };\n  InlineSVG.defaultProps = {\n    cacheRequests: true,\n    uniquifyIDs: false\n  };\n  return InlineSVG;\n}(React.PureComponent);\nexport default InlineSVG;\nexport * from './types';","map":{"version":3,"names":["React","convert","STATUS","canUseDOM","isSupportedEnvironment","randomString","removeProperties","cacheStore","Object","create","InlineSVG","_super","__extends","props","_this","call","isActive","handleCacheQueue","content","handleLoad","handleError","setState","status","LOADED","getElement","error","onError","message","UNSUPPORTED","FAILED","request","_a","cacheRequests","fetchOptions","src","LOADING","queue","fetch","then","response","contentType","headers","get","__read","split","fileType","Error","some","d","indexOf","text","currentSrc","cache","filter","cb","catch","forEach","state","element","hasCache","PENDING","hash","uniqueHash","prototype","componentDidMount","load","componentDidUpdate","prevProps","prevState","_b","onLoad","READY","componentWillUnmount","processSVG","preProcessor","updateSVGAttributes","node","baseURL","uniquifyIDs","replaceableAttributes","linkAttributes","isDataValue","name","value","__spreadArray","children","map","attributes","length","attributes_1","values","a","attr","match","replace","r","attribute","find","getNode","description","title","svgText","nodeOnly","SVGSVGElement","svg","originalDesc","querySelector","parentNode","removeChild","descElement","document","createElement","innerHTML","prepend","originalTitle","titleElement","isValidElement","push","dataURI","inlineSrc","atob","decodeURIComponent","render","_c","innerRef","_d","loader","elementProps","cloneElement","__assign","ref","defaultProps","PureComponent"],"sources":["/Users/erickmaina/Desktop/Personal_Projects/Java/Overflow/frontend/overflow/node_modules/react-inlinesvg/src/index.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport convert from 'react-from-dom';\n\nimport {\n  STATUS,\n  canUseDOM,\n  isSupportedEnvironment,\n  randomString,\n  removeProperties,\n} from './helpers';\nimport { FetchError, Props, State, StorageItem } from './types';\n\nexport const cacheStore: { [key: string]: StorageItem } = Object.create(null);\n\nexport default class InlineSVG extends React.PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      content: '',\n      element: null,\n      hasCache: !!props.cacheRequests && !!cacheStore[props.src],\n      status: STATUS.PENDING,\n    };\n\n    this.hash = props.uniqueHash || randomString(8);\n  }\n\n  private isActive = false;\n  private readonly hash: string;\n\n  public static defaultProps = {\n    cacheRequests: true,\n    uniquifyIDs: false,\n  };\n\n  public componentDidMount(): void {\n    this.isActive = true;\n\n    if (!canUseDOM()) {\n      return;\n    }\n\n    const { status } = this.state;\n    const { src } = this.props;\n\n    try {\n      /* istanbul ignore else */\n      if (status === STATUS.PENDING) {\n        /* istanbul ignore else */\n        if (!isSupportedEnvironment()) {\n          throw new Error('Browser does not support SVG');\n        }\n\n        /* istanbul ignore else */\n        if (!src) {\n          throw new Error('Missing src');\n        }\n\n        this.load();\n      }\n    } catch (error) {\n      this.handleError(error);\n    }\n  }\n\n  public componentDidUpdate(prevProps: Props, prevState: State): void {\n    if (!canUseDOM()) {\n      return;\n    }\n\n    const { hasCache, status } = this.state;\n    const { onLoad, src } = this.props;\n\n    if (prevState.status !== STATUS.READY && status === STATUS.READY) {\n      /* istanbul ignore else */\n      if (onLoad) {\n        onLoad(src, hasCache);\n      }\n    }\n\n    if (prevProps.src !== src) {\n      if (!src) {\n        this.handleError(new Error('Missing src'));\n        return;\n      }\n\n      this.load();\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this.isActive = false;\n  }\n\n  private processSVG() {\n    const { content } = this.state;\n    const { preProcessor } = this.props;\n\n    if (preProcessor) {\n      return preProcessor(content);\n    }\n\n    return content;\n  }\n\n  private updateSVGAttributes(node: SVGSVGElement): SVGSVGElement {\n    const { baseURL = '', uniquifyIDs } = this.props;\n    const replaceableAttributes = ['id', 'href', 'xlink:href', 'xlink:role', 'xlink:arcrole'];\n    const linkAttributes = ['href', 'xlink:href'];\n    const isDataValue = (name: string, value: string) =>\n      linkAttributes.indexOf(name) >= 0 && (value ? value.indexOf('#') < 0 : false);\n\n    if (!uniquifyIDs) {\n      return node;\n    }\n\n    [...node.children].map((d) => {\n      if (d.attributes && d.attributes.length) {\n        const attributes = Object.values(d.attributes).map((a) => {\n          const attr = a;\n          const match = a.value.match(/url\\((.*?)\\)/);\n\n          if (match && match[1]) {\n            attr.value = a.value.replace(match[0], `url(${baseURL}${match[1]}__${this.hash})`);\n          }\n\n          return attr;\n        });\n\n        replaceableAttributes.forEach((r) => {\n          const attribute = attributes.find((a) => a.name === r);\n\n          if (attribute && !isDataValue(r, attribute.value)) {\n            attribute.value = `${attribute.value}__${this.hash}`;\n          }\n        });\n      }\n\n      if (d.children.length) {\n        return this.updateSVGAttributes(d as SVGSVGElement);\n      }\n\n      return d;\n    });\n\n    return node;\n  }\n\n  private getNode() {\n    const { description, title } = this.props;\n\n    try {\n      const svgText = this.processSVG();\n      const node = convert(svgText, { nodeOnly: true });\n\n      if (!node || !(node instanceof SVGSVGElement)) {\n        throw new Error('Could not convert the src to a DOM Node');\n      }\n\n      const svg = this.updateSVGAttributes(node);\n\n      if (description) {\n        const originalDesc = svg.querySelector('desc');\n\n        if (originalDesc && originalDesc.parentNode) {\n          originalDesc.parentNode.removeChild(originalDesc);\n        }\n\n        const descElement = document.createElement('desc');\n        descElement.innerHTML = description;\n        svg.prepend(descElement);\n      }\n\n      if (title) {\n        const originalTitle = svg.querySelector('title');\n\n        if (originalTitle && originalTitle.parentNode) {\n          originalTitle.parentNode.removeChild(originalTitle);\n        }\n\n        const titleElement = document.createElement('title');\n        titleElement.innerHTML = title;\n        svg.prepend(titleElement);\n      }\n\n      return svg;\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  private getElement() {\n    try {\n      const node = this.getNode() as Node;\n      const element = convert(node);\n\n      if (!element || !React.isValidElement(element)) {\n        throw new Error('Could not convert the src to a React element');\n      }\n\n      this.setState({\n        element,\n        status: STATUS.READY,\n      });\n    } catch (error) {\n      this.handleError(new Error(error.message));\n    }\n  }\n\n  private load() {\n    /* istanbul ignore else */\n    if (this.isActive) {\n      this.setState(\n        {\n          content: '',\n          element: null,\n          status: STATUS.LOADING,\n        },\n        () => {\n          const { cacheRequests, src } = this.props;\n          const cache = cacheRequests && cacheStore[src];\n          if (cache) {\n            /* istanbul ignore else */\n            if (cache.status === STATUS.LOADING) {\n              cache.queue.push(this.handleCacheQueue);\n            } else if (cache.status === STATUS.LOADED) {\n              this.handleLoad(cache.content);\n            }\n            return;\n          }\n\n          const dataURI = src.match(/data:image\\/svg[^,]*?(;base64)?,(.*)/);\n          let inlineSrc;\n\n          if (dataURI) {\n            inlineSrc = dataURI[1] ? atob(dataURI[2]) : decodeURIComponent(dataURI[2]);\n          } else if (src.indexOf('<svg') >= 0) {\n            inlineSrc = src;\n          }\n\n          if (inlineSrc) {\n            this.handleLoad(inlineSrc);\n            return;\n          }\n\n          this.request();\n        },\n      );\n    }\n  }\n\n  private handleCacheQueue = (content: string | Error) => {\n    /* istanbul ignore else */\n    if (typeof content === 'string') {\n      this.handleLoad(content);\n      return;\n    }\n\n    this.handleError(content);\n  };\n\n  private handleLoad = (content: string) => {\n    /* istanbul ignore else */\n    if (this.isActive) {\n      this.setState(\n        {\n          content,\n          status: STATUS.LOADED,\n        },\n        this.getElement,\n      );\n    }\n  };\n\n  private handleError = (error: Error | FetchError) => {\n    const { onError } = this.props;\n    const status =\n      error.message === 'Browser does not support SVG' ? STATUS.UNSUPPORTED : STATUS.FAILED;\n\n    /* istanbul ignore else */\n    if (this.isActive) {\n      this.setState({ status }, () => {\n        /* istanbul ignore else */\n        if (typeof onError === 'function') {\n          onError(error);\n        }\n      });\n    }\n  };\n\n  private request = () => {\n    const { cacheRequests, fetchOptions, src } = this.props;\n\n    try {\n      if (cacheRequests) {\n        cacheStore[src] = { content: '', status: STATUS.LOADING, queue: [] };\n      }\n\n      return fetch(src, fetchOptions)\n        .then((response) => {\n          const contentType = response.headers.get('content-type');\n          const [fileType] = (contentType || '').split(/ ?; ?/);\n\n          if (response.status > 299) {\n            throw new Error('Not found');\n          }\n\n          if (!['image/svg+xml', 'text/plain'].some((d) => fileType.indexOf(d) >= 0)) {\n            throw new Error(`Content type isn't valid: ${fileType}`);\n          }\n\n          return response.text();\n        })\n        .then((content) => {\n          const { src: currentSrc } = this.props;\n\n          // the current src don't match the previous one, skipping...\n          if (src !== currentSrc) {\n            return;\n          }\n\n          this.handleLoad(content);\n\n          /* istanbul ignore else */\n          if (cacheRequests) {\n            const cache = cacheStore[src];\n\n            /* istanbul ignore else */\n            if (cache) {\n              cache.content = content;\n              cache.status = STATUS.LOADED;\n\n              cache.queue = cache.queue.filter((cb) => {\n                cb(content);\n\n                return false;\n              });\n            }\n          }\n        })\n        .catch((error) => {\n          this.handleError(error);\n\n          /* istanbul ignore else */\n          if (cacheRequests) {\n            const cache = cacheStore[src];\n\n            /* istanbul ignore else */\n            if (cache) {\n              cache.queue.forEach((cb: (content: string) => void) => {\n                cb(error);\n              });\n\n              delete cacheStore[src];\n            }\n          }\n        });\n    } catch (error) {\n      return this.handleError(new Error(error.message));\n    }\n  };\n\n  public render(): React.ReactNode {\n    const { element, status } = this.state;\n    const { children = null, innerRef, loader = null } = this.props;\n    const elementProps = removeProperties(\n      this.props,\n      'baseURL',\n      'cacheRequests',\n      'children',\n      'description',\n      'fetchOptions',\n      'innerRef',\n      'loader',\n      'onError',\n      'onLoad',\n      'preProcessor',\n      'src',\n      'title',\n      'uniqueHash',\n      'uniquifyIDs',\n    );\n\n    if (!canUseDOM()) {\n      return loader;\n    }\n\n    if (element) {\n      return React.cloneElement(element as React.ReactElement, { ref: innerRef, ...elementProps });\n    }\n\n    if ([STATUS.UNSUPPORTED, STATUS.FAILED].indexOf(status) > -1) {\n      return children;\n    }\n\n    return loader;\n  }\n}\n\nexport * from './types';\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,OAAOC,OAAO,MAAM,gBAAgB;AAEpC,SACEC,MAAM,EACNC,SAAS,EACTC,sBAAsB,EACtBC,YAAY,EACZC,gBAAgB,QACX,WAAW;AAGlB,OAAO,IAAMC,UAAU,GAAmCC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;AAE7E,IAAAC,SAAA,0BAAAC,MAAA;EAAuCC,SAAA,CAAAF,SAAA,EAAAC,MAAA;EACrC,SAAAD,UAAYG,KAAY;IAAxB,IAAAC,KAAA,GACEH,MAAA,CAAAI,IAAA,OAAMF,KAAK,CAAC;IAYNC,KAAA,CAAAE,QAAQ,GAAG,KAAK;IAgOhBF,KAAA,CAAAG,gBAAgB,GAAG,UAACC,OAAuB;MACjD;MACA,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;QAC/BJ,KAAI,CAACK,UAAU,CAACD,OAAO,CAAC;QACxB;;MAGFJ,KAAI,CAACM,WAAW,CAACF,OAAO,CAAC;IAC3B,CAAC;IAEOJ,KAAA,CAAAK,UAAU,GAAG,UAACD,OAAe;MACnC;MACA,IAAIJ,KAAI,CAACE,QAAQ,EAAE;QACjBF,KAAI,CAACO,QAAQ,CACX;UACEH,OAAO,EAAAA,OAAA;UACPI,MAAM,EAAEpB,MAAM,CAACqB;SAChB,EACDT,KAAI,CAACU,UAAU,CAChB;;IAEL,CAAC;IAEOV,KAAA,CAAAM,WAAW,GAAG,UAACK,KAAyB;MACtC,IAAAC,OAAO,GAAKZ,KAAI,CAACD,KAAK,CAAAa,OAAf;MACf,IAAMJ,MAAM,GACVG,KAAK,CAACE,OAAO,KAAK,8BAA8B,GAAGzB,MAAM,CAAC0B,WAAW,GAAG1B,MAAM,CAAC2B,MAAM;MAEvF;MACA,IAAIf,KAAI,CAACE,QAAQ,EAAE;QACjBF,KAAI,CAACO,QAAQ,CAAC;UAAEC,MAAM,EAAAA;QAAA,CAAE,EAAE;UACxB;UACA,IAAI,OAAOI,OAAO,KAAK,UAAU,EAAE;YACjCA,OAAO,CAACD,KAAK,CAAC;;QAElB,CAAC,CAAC;;IAEN,CAAC;IAEOX,KAAA,CAAAgB,OAAO,GAAG;MACV,IAAAC,EAAA,GAAuCjB,KAAI,CAACD,KAAK;QAA/CmB,aAAa,GAAAD,EAAA,CAAAC,aAAA;QAAEC,YAAY,GAAAF,EAAA,CAAAE,YAAA;QAAEC,GAAG,GAAAH,EAAA,CAAAG,GAAe;MAEvD,IAAI;QACF,IAAIF,aAAa,EAAE;UACjBzB,UAAU,CAAC2B,GAAG,CAAC,GAAG;YAAEhB,OAAO,EAAE,EAAE;YAAEI,MAAM,EAAEpB,MAAM,CAACiC,OAAO;YAAEC,KAAK,EAAE;UAAE,CAAE;;QAGtE,OAAOC,KAAK,CAACH,GAAG,EAAED,YAAY,CAAC,CAC5BK,IAAI,CAAC,UAACC,QAAQ;UACb,IAAMC,WAAW,GAAGD,QAAQ,CAACE,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;UAClD,IAAAX,EAAA,GAAAY,MAAA,CAAa,CAACH,WAAW,IAAI,EAAE,EAAEI,KAAK,CAAC,OAAO,CAAC;YAA9CC,QAAQ,GAAAd,EAAA,GAAsC;UAErD,IAAIQ,QAAQ,CAACjB,MAAM,GAAG,GAAG,EAAE;YACzB,MAAM,IAAIwB,KAAK,CAAC,WAAW,CAAC;;UAG9B,IAAI,CAAC,CAAC,eAAe,EAAE,YAAY,CAAC,CAACC,IAAI,CAAC,UAACC,CAAC;YAAK,OAAAH,QAAQ,CAACI,OAAO,CAACD,CAAC,CAAC,IAAI,CAAC;UAAxB,CAAwB,CAAC,EAAE;YAC1E,MAAM,IAAIF,KAAK,CAAC,+BAA6BD,QAAU,CAAC;;UAG1D,OAAON,QAAQ,CAACW,IAAI,EAAE;QACxB,CAAC,CAAC,CACDZ,IAAI,CAAC,UAACpB,OAAO;UACJ,IAAKiC,UAAU,GAAKrC,KAAI,CAACD,KAAK,CAAAqB,GAAf;UAEvB;UACA,IAAIA,GAAG,KAAKiB,UAAU,EAAE;YACtB;;UAGFrC,KAAI,CAACK,UAAU,CAACD,OAAO,CAAC;UAExB;UACA,IAAIc,aAAa,EAAE;YACjB,IAAMoB,KAAK,GAAG7C,UAAU,CAAC2B,GAAG,CAAC;YAE7B;YACA,IAAIkB,KAAK,EAAE;cACTA,KAAK,CAAClC,OAAO,GAAGA,OAAO;cACvBkC,KAAK,CAAC9B,MAAM,GAAGpB,MAAM,CAACqB,MAAM;cAE5B6B,KAAK,CAAChB,KAAK,GAAGgB,KAAK,CAAChB,KAAK,CAACiB,MAAM,CAAC,UAACC,EAAE;gBAClCA,EAAE,CAACpC,OAAO,CAAC;gBAEX,OAAO,KAAK;cACd,CAAC,CAAC;;;QAGR,CAAC,CAAC,CACDqC,KAAK,CAAC,UAAC9B,KAAK;UACXX,KAAI,CAACM,WAAW,CAACK,KAAK,CAAC;UAEvB;UACA,IAAIO,aAAa,EAAE;YACjB,IAAMoB,KAAK,GAAG7C,UAAU,CAAC2B,GAAG,CAAC;YAE7B;YACA,IAAIkB,KAAK,EAAE;cACTA,KAAK,CAAChB,KAAK,CAACoB,OAAO,CAAC,UAACF,EAA6B;gBAChDA,EAAE,CAAC7B,KAAK,CAAC;cACX,CAAC,CAAC;cAEF,OAAOlB,UAAU,CAAC2B,GAAG,CAAC;;;QAG5B,CAAC,CAAC;OACL,CAAC,OAAOT,KAAK,EAAE;QACd,OAAOX,KAAI,CAACM,WAAW,CAAC,IAAI0B,KAAK,CAACrB,KAAK,CAACE,OAAO,CAAC,CAAC;;IAErD,CAAC;IAvVCb,KAAI,CAAC2C,KAAK,GAAG;MACXvC,OAAO,EAAE,EAAE;MACXwC,OAAO,EAAE,IAAI;MACbC,QAAQ,EAAE,CAAC,CAAC9C,KAAK,CAACmB,aAAa,IAAI,CAAC,CAACzB,UAAU,CAACM,KAAK,CAACqB,GAAG,CAAC;MAC1DZ,MAAM,EAAEpB,MAAM,CAAC0D;KAChB;IAED9C,KAAI,CAAC+C,IAAI,GAAGhD,KAAK,CAACiD,UAAU,IAAIzD,YAAY,CAAC,CAAC,CAAC;;EACjD;EAUOK,SAAA,CAAAqD,SAAA,CAAAC,iBAAiB,GAAxB;IACE,IAAI,CAAChD,QAAQ,GAAG,IAAI;IAEpB,IAAI,CAACb,SAAS,EAAE,EAAE;MAChB;;IAGM,IAAAmB,MAAM,GAAK,IAAI,CAACmC,KAAK,CAAAnC,MAAf;IACN,IAAAY,GAAG,GAAK,IAAI,CAACrB,KAAK,CAAAqB,GAAf;IAEX,IAAI;MACF;MACA,IAAIZ,MAAM,KAAKpB,MAAM,CAAC0D,OAAO,EAAE;QAC7B;QACA,IAAI,CAACxD,sBAAsB,EAAE,EAAE;UAC7B,MAAM,IAAI0C,KAAK,CAAC,8BAA8B,CAAC;;QAGjD;QACA,IAAI,CAACZ,GAAG,EAAE;UACR,MAAM,IAAIY,KAAK,CAAC,aAAa,CAAC;;QAGhC,IAAI,CAACmB,IAAI,EAAE;;KAEd,CAAC,OAAOxC,KAAK,EAAE;MACd,IAAI,CAACL,WAAW,CAACK,KAAK,CAAC;;EAE3B,CAAC;EAEMf,SAAA,CAAAqD,SAAA,CAAAG,kBAAkB,GAAzB,UAA0BC,SAAgB,EAAEC,SAAgB;IAC1D,IAAI,CAACjE,SAAS,EAAE,EAAE;MAChB;;IAGI,IAAA4B,EAAA,GAAuB,IAAI,CAAC0B,KAAK;MAA/BE,QAAQ,GAAA5B,EAAA,CAAA4B,QAAA;MAAErC,MAAM,GAAAS,EAAA,CAAAT,MAAe;IACjC,IAAA+C,EAAA,GAAkB,IAAI,CAACxD,KAAK;MAA1ByD,MAAM,GAAAD,EAAA,CAAAC,MAAA;MAAEpC,GAAG,GAAAmC,EAAA,CAAAnC,GAAe;IAElC,IAAIkC,SAAS,CAAC9C,MAAM,KAAKpB,MAAM,CAACqE,KAAK,IAAIjD,MAAM,KAAKpB,MAAM,CAACqE,KAAK,EAAE;MAChE;MACA,IAAID,MAAM,EAAE;QACVA,MAAM,CAACpC,GAAG,EAAEyB,QAAQ,CAAC;;;IAIzB,IAAIQ,SAAS,CAACjC,GAAG,KAAKA,GAAG,EAAE;MACzB,IAAI,CAACA,GAAG,EAAE;QACR,IAAI,CAACd,WAAW,CAAC,IAAI0B,KAAK,CAAC,aAAa,CAAC,CAAC;QAC1C;;MAGF,IAAI,CAACmB,IAAI,EAAE;;EAEf,CAAC;EAEMvD,SAAA,CAAAqD,SAAA,CAAAS,oBAAoB,GAA3B;IACE,IAAI,CAACxD,QAAQ,GAAG,KAAK;EACvB,CAAC;EAEON,SAAA,CAAAqD,SAAA,CAAAU,UAAU,GAAlB;IACU,IAAAvD,OAAO,GAAK,IAAI,CAACuC,KAAK,CAAAvC,OAAf;IACP,IAAAwD,YAAY,GAAK,IAAI,CAAC7D,KAAK,CAAA6D,YAAf;IAEpB,IAAIA,YAAY,EAAE;MAChB,OAAOA,YAAY,CAACxD,OAAO,CAAC;;IAG9B,OAAOA,OAAO;EAChB,CAAC;EAEOR,SAAA,CAAAqD,SAAA,CAAAY,mBAAmB,GAA3B,UAA4BC,IAAmB;IAA/C,IAAA9D,KAAA;IACQ,IAAAiB,EAAA,GAAgC,IAAI,CAAClB,KAAK;MAAxCwD,EAAA,GAAAtC,EAAA,CAAA8C,OAAY;MAAZA,OAAO,GAAAR,EAAA,cAAG,EAAE,GAAAA,EAAA;MAAES,WAAW,GAAA/C,EAAA,CAAA+C,WAAe;IAChD,IAAMC,qBAAqB,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,YAAY,EAAE,YAAY,EAAE,eAAe,CAAC;IACzF,IAAMC,cAAc,GAAG,CAAC,MAAM,EAAE,YAAY,CAAC;IAC7C,IAAMC,WAAW,GAAG,SAAAA,CAACC,IAAY,EAAEC,KAAa;MAC9C,OAAAH,cAAc,CAAC/B,OAAO,CAACiC,IAAI,CAAC,IAAI,CAAC,KAAKC,KAAK,GAAGA,KAAK,CAAClC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;IAA7E,CAA6E;IAE/E,IAAI,CAAC6B,WAAW,EAAE;MAChB,OAAOF,IAAI;;IAGbQ,aAAA,KAAAzC,MAAA,CAAIiC,IAAI,CAACS,QAAQ,GAAEC,GAAG,CAAC,UAACtC,CAAC;MACvB,IAAIA,CAAC,CAACuC,UAAU,IAAIvC,CAAC,CAACuC,UAAU,CAACC,MAAM,EAAE;QACvC,IAAMC,YAAU,GAAGjF,MAAM,CAACkF,MAAM,CAAC1C,CAAC,CAACuC,UAAU,CAAC,CAACD,GAAG,CAAC,UAACK,CAAC;UACnD,IAAMC,IAAI,GAAGD,CAAC;UACd,IAAME,KAAK,GAAGF,CAAC,CAACR,KAAK,CAACU,KAAK,CAAC,cAAc,CAAC;UAE3C,IAAIA,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE;YACrBD,IAAI,CAACT,KAAK,GAAGQ,CAAC,CAACR,KAAK,CAACW,OAAO,CAACD,KAAK,CAAC,CAAC,CAAC,EAAE,SAAOhB,OAAO,GAAGgB,KAAK,CAAC,CAAC,CAAC,UAAK/E,KAAI,CAAC+C,IAAI,MAAG,CAAC;;UAGpF,OAAO+B,IAAI;QACb,CAAC,CAAC;QAEFb,qBAAqB,CAACvB,OAAO,CAAC,UAACuC,CAAC;UAC9B,IAAMC,SAAS,GAAGP,YAAU,CAACQ,IAAI,CAAC,UAACN,CAAC;YAAK,OAAAA,CAAC,CAACT,IAAI,KAAKa,CAAC;UAAZ,CAAY,CAAC;UAEtD,IAAIC,SAAS,IAAI,CAACf,WAAW,CAACc,CAAC,EAAEC,SAAS,CAACb,KAAK,CAAC,EAAE;YACjDa,SAAS,CAACb,KAAK,GAAMa,SAAS,CAACb,KAAK,UAAKrE,KAAI,CAAC+C,IAAM;;QAExD,CAAC,CAAC;;MAGJ,IAAIb,CAAC,CAACqC,QAAQ,CAACG,MAAM,EAAE;QACrB,OAAO1E,KAAI,CAAC6D,mBAAmB,CAAC3B,CAAkB,CAAC;;MAGrD,OAAOA,CAAC;IACV,CAAC,CAAC;IAEF,OAAO4B,IAAI;EACb,CAAC;EAEOlE,SAAA,CAAAqD,SAAA,CAAAmC,OAAO,GAAf;IACQ,IAAAnE,EAAA,GAAyB,IAAI,CAAClB,KAAK;MAAjCsF,WAAW,GAAApE,EAAA,CAAAoE,WAAA;MAAEC,KAAK,GAAArE,EAAA,CAAAqE,KAAe;IAEzC,IAAI;MACF,IAAMC,OAAO,GAAG,IAAI,CAAC5B,UAAU,EAAE;MACjC,IAAMG,IAAI,GAAG3E,OAAO,CAACoG,OAAO,EAAE;QAAEC,QAAQ,EAAE;MAAI,CAAE,CAAC;MAEjD,IAAI,CAAC1B,IAAI,IAAI,EAAEA,IAAI,YAAY2B,aAAa,CAAC,EAAE;QAC7C,MAAM,IAAIzD,KAAK,CAAC,yCAAyC,CAAC;;MAG5D,IAAM0D,GAAG,GAAG,IAAI,CAAC7B,mBAAmB,CAACC,IAAI,CAAC;MAE1C,IAAIuB,WAAW,EAAE;QACf,IAAMM,YAAY,GAAGD,GAAG,CAACE,aAAa,CAAC,MAAM,CAAC;QAE9C,IAAID,YAAY,IAAIA,YAAY,CAACE,UAAU,EAAE;UAC3CF,YAAY,CAACE,UAAU,CAACC,WAAW,CAACH,YAAY,CAAC;;QAGnD,IAAMI,WAAW,GAAGC,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;QAClDF,WAAW,CAACG,SAAS,GAAGb,WAAW;QACnCK,GAAG,CAACS,OAAO,CAACJ,WAAW,CAAC;;MAG1B,IAAIT,KAAK,EAAE;QACT,IAAMc,aAAa,GAAGV,GAAG,CAACE,aAAa,CAAC,OAAO,CAAC;QAEhD,IAAIQ,aAAa,IAAIA,aAAa,CAACP,UAAU,EAAE;UAC7CO,aAAa,CAACP,UAAU,CAACC,WAAW,CAACM,aAAa,CAAC;;QAGrD,IAAMC,YAAY,GAAGL,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;QACpDI,YAAY,CAACH,SAAS,GAAGZ,KAAK;QAC9BI,GAAG,CAACS,OAAO,CAACE,YAAY,CAAC;;MAG3B,OAAOX,GAAG;KACX,CAAC,OAAO/E,KAAK,EAAE;MACd,OAAO,IAAI,CAACL,WAAW,CAACK,KAAK,CAAC;;EAElC,CAAC;EAEOf,SAAA,CAAAqD,SAAA,CAAAvC,UAAU,GAAlB;IACE,IAAI;MACF,IAAMoD,IAAI,GAAG,IAAI,CAACsB,OAAO,EAAU;MACnC,IAAMxC,OAAO,GAAGzD,OAAO,CAAC2E,IAAI,CAAC;MAE7B,IAAI,CAAClB,OAAO,IAAI,CAAC1D,KAAK,CAACoH,cAAc,CAAC1D,OAAO,CAAC,EAAE;QAC9C,MAAM,IAAIZ,KAAK,CAAC,8CAA8C,CAAC;;MAGjE,IAAI,CAACzB,QAAQ,CAAC;QACZqC,OAAO,EAAAA,OAAA;QACPpC,MAAM,EAAEpB,MAAM,CAACqE;OAChB,CAAC;KACH,CAAC,OAAO9C,KAAK,EAAE;MACd,IAAI,CAACL,WAAW,CAAC,IAAI0B,KAAK,CAACrB,KAAK,CAACE,OAAO,CAAC,CAAC;;EAE9C,CAAC;EAEOjB,SAAA,CAAAqD,SAAA,CAAAE,IAAI,GAAZ;IAAA,IAAAnD,KAAA;IACE;IACA,IAAI,IAAI,CAACE,QAAQ,EAAE;MACjB,IAAI,CAACK,QAAQ,CACX;QACEH,OAAO,EAAE,EAAE;QACXwC,OAAO,EAAE,IAAI;QACbpC,MAAM,EAAEpB,MAAM,CAACiC;OAChB,EACD;QACQ,IAAAJ,EAAA,GAAyBjB,KAAI,CAACD,KAAK;UAAjCmB,aAAa,GAAAD,EAAA,CAAAC,aAAA;UAAEE,GAAG,GAAAH,EAAA,CAAAG,GAAe;QACzC,IAAMkB,KAAK,GAAGpB,aAAa,IAAIzB,UAAU,CAAC2B,GAAG,CAAC;QAC9C,IAAIkB,KAAK,EAAE;UACT;UACA,IAAIA,KAAK,CAAC9B,MAAM,KAAKpB,MAAM,CAACiC,OAAO,EAAE;YACnCiB,KAAK,CAAChB,KAAK,CAACiF,IAAI,CAACvG,KAAI,CAACG,gBAAgB,CAAC;WACxC,MAAM,IAAImC,KAAK,CAAC9B,MAAM,KAAKpB,MAAM,CAACqB,MAAM,EAAE;YACzCT,KAAI,CAACK,UAAU,CAACiC,KAAK,CAAClC,OAAO,CAAC;;UAEhC;;QAGF,IAAMoG,OAAO,GAAGpF,GAAG,CAAC2D,KAAK,CAAC,sCAAsC,CAAC;QACjE,IAAI0B,SAAS;QAEb,IAAID,OAAO,EAAE;UACXC,SAAS,GAAGD,OAAO,CAAC,CAAC,CAAC,GAAGE,IAAI,CAACF,OAAO,CAAC,CAAC,CAAC,CAAC,GAAGG,kBAAkB,CAACH,OAAO,CAAC,CAAC,CAAC,CAAC;SAC3E,MAAM,IAAIpF,GAAG,CAACe,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;UACnCsE,SAAS,GAAGrF,GAAG;;QAGjB,IAAIqF,SAAS,EAAE;UACbzG,KAAI,CAACK,UAAU,CAACoG,SAAS,CAAC;UAC1B;;QAGFzG,KAAI,CAACgB,OAAO,EAAE;MAChB,CAAC,CACF;;EAEL,CAAC;EAiHMpB,SAAA,CAAAqD,SAAA,CAAA2D,MAAM,GAAb;IACQ,IAAA3F,EAAA,GAAsB,IAAI,CAAC0B,KAAK;MAA9BC,OAAO,GAAA3B,EAAA,CAAA2B,OAAA;MAAEpC,MAAM,GAAAS,EAAA,CAAAT,MAAe;IAChC,IAAA+C,EAAA,GAA+C,IAAI,CAACxD,KAAK;MAAvD8G,EAAA,GAAAtD,EAAA,CAAAgB,QAAe;MAAfA,QAAQ,GAAAsC,EAAA,cAAG,IAAI,GAAAA,EAAA;MAAEC,QAAQ,GAAAvD,EAAA,CAAAuD,QAAA;MAAEC,EAAA,GAAAxD,EAAA,CAAAyD,MAAa;MAAbA,MAAM,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAe;IAC/D,IAAME,YAAY,GAAGzH,gBAAgB,CACnC,IAAI,CAACO,KAAK,EACV,SAAS,EACT,eAAe,EACf,UAAU,EACV,aAAa,EACb,cAAc,EACd,UAAU,EACV,QAAQ,EACR,SAAS,EACT,QAAQ,EACR,cAAc,EACd,KAAK,EACL,OAAO,EACP,YAAY,EACZ,aAAa,CACd;IAED,IAAI,CAACV,SAAS,EAAE,EAAE;MAChB,OAAO2H,MAAM;;IAGf,IAAIpE,OAAO,EAAE;MACX,OAAO1D,KAAK,CAACgI,YAAY,CAACtE,OAA6B,EAAAuE,QAAA;QAAIC,GAAG,EAAEN;MAAQ,GAAKG,YAAY,EAAG;;IAG9F,IAAI,CAAC7H,MAAM,CAAC0B,WAAW,EAAE1B,MAAM,CAAC2B,MAAM,CAAC,CAACoB,OAAO,CAAC3B,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE;MAC5D,OAAO+D,QAAQ;;IAGjB,OAAOyC,MAAM;EACf,CAAC;EA9WapH,SAAA,CAAAyH,YAAY,GAAG;IAC3BnG,aAAa,EAAE,IAAI;IACnB8C,WAAW,EAAE;GACd;EA4WH,OAAApE,SAAC;CAAA,CAhYsCV,KAAK,CAACoI,aAAa;eAArC1H,SAAS;AAkY9B,cAAc,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}